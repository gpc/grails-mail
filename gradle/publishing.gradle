import io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository

ext.set('signing.keyId', findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY'))
ext.set('signing.password', findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE'))

def javaComponent = components.named('java')
publishing {
    publications {
        register('grailsMailPlugin', MavenPublication) {
            from javaComponent.get()
            versionMapping {
                usage('java-api') { fromResolutionOf('runtimeClasspath') }
                usage('java-runtime') { fromResolutionResult() }
            }
            pom {
                name = 'Grails Mail plugin'
                description = 'Provides Mail support to a running Grails application'
                url = 'https://github.com/grails/grails-mail'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'candrews'
                        name = 'Craig Andrews'
                        email = 'candrews@integralblue.com'
                    }
                    developer {
                        id = 'ldaley'
                        name = 'Luke Daley'
                        email = 'ld@ldaley.com'
                    }
                    developer {
                        id = 'pledbrook'
                        name = 'Peter Ledbrook'
                        email = 'p.ledbrook@cacoethes.co.uk'
                    }
                    developer {
                        id = 'osscontributor'
                        name = 'Jeff Brown'
                        email = 'brownj@ociweb.com'
                    }
                    developer {
                        id = 'graemerocher'
                        name = 'Graeme Rocher'
                        email = 'graeme.rocher@gmail.com'
                    }
                    developer {
                        id = 'marcpalmer'
                        name = 'Marc Palmer'
                        email = 'marc@grailsrocks.com'
                    }
                    developer {
                        id = 'sbglasius'
                        name = 'SÃ¸ren Berg Glasius'
                        email = 'soeren@glasius.dk'
                    }
                    developer {
                        id = 'matrei'
                        name = 'Mattias Reichel'
                        email = 'mattias.reichel@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/grails/grails-mail.git'
                    developerConnection = 'scm:git:ssh://github.com:grails/grails-mail.git'
                    url = 'https://github.com/grails/grails-mail'
                }
            }
            // dependency management shouldn't be included
            pom.withXml {
                def root = it.asElement()
                root.getElementsByTagName('dependencyManagement').each { root.removeChild(it) }
            }
        }
    }

    if (isSnapshot) {
        repositories {
            maven {
                credentials {
                    username = findProperty('artifactoryPublishUsername') ?: ''
                    password = findProperty('artifactoryPublishPassword') ?: ''
                }
                url = uri('https://repo.grails.org/grails/plugins3-snapshots-local')
            }
        }
    }
}

def mavenPublication = extensions.findByType(PublishingExtension).publications.named('grailsMailPlugin')
tasks.withType(Sign).configureEach {
    onlyIf { isReleaseVersion }
}
afterEvaluate {
    signing {
        required = { isReleaseVersion }
        sign(mavenPublication.get())
    }
}

if (isReleaseVersion) {
    nexusPublishing {
        String sonatypeUsername = findProperty('sonatypeUsername') ?: ''
        String sonatypePassword = findProperty('sonatypePassword') ?: ''
        String sonatypeStagingProfileId = findProperty('sonatypeStagingProfileId') ?: ''
        repositories {
            sonatype {
                nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
                username = sonatypeUsername
                password = sonatypePassword
                stagingProfileId = sonatypeStagingProfileId
            }
        }
    }
}


//do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(InitializeNexusStagingRepository).configureEach {
    shouldRunAfter = tasks.withType(Sign)
}